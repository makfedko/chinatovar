from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import pandas as pd


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
ENTER YOU TELEGRAM TOKEN
EXCEL_FILE = '–û—Ç—Å—Ç–∞—Ç–∫–∏ (1).xls'

admin_ids = []  # ‚Üê –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID


# === –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel ===
def load_products():
    try:
        df = pd.read_excel(EXCEL_FILE, header=None)

        # –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        headers = {}
        for j in range(min(50, len(df))):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 50 —Å—Ç—Ä–æ–∫
            row = df.iloc[j]
            for i_col, cell in enumerate(row):
                if isinstance(cell, str) and str(cell).strip() != '':
                    cell = str(cell).strip().lower()
                    if '–∫–æ–¥' in cell and 'code' not in headers:
                        headers['code'] = i_col
                    elif '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in cell or '–Ω–∞–∑–≤–∞–Ω–∏–µ' in cell:
                        headers['name'] = i_col
                    elif '–æ—Å—Ç–∞—Ç–æ–∫' in cell:
                        headers['stock'] = i_col
                    elif '—Ü–µ–Ω–∞' in cell:
                        headers['price'] = i_col

            if len(headers) >= 4:
                found_row_index = j + 1
                break
        else:
            raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü–µ")

        products_list = []
        start_row = found_row_index if found_row_index is not None else 0

        for idx in range(start_row, len(df)):
            row = df.iloc[idx]

            code = str(row[headers['code']]).strip() if not pd.isna(row[headers['code']]) else None
            name = str(row[headers['name']]).strip() if not pd.isna(row[headers['name']]) else None
            stock = int(float(row[headers['stock']])) if not pd.isna(row[headers['stock']]) else 0
            price = float(row[headers['price']]) if not pd.isna(row[headers['price']]) else 0

            if name and code:
                products_list.append({
                    'code': code,
                    'name': name,
                    'stock': stock,
                    'price': price
                })

        return products_list

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return []


# === –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ Excel —Ñ–∞–π–ª–∞ ===
products = load_products()
print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")


# === –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ===
categories = {
    "—à–∞–º–ø—É—Ä–∞": ["—à–∞–º–ø—É—Ä", "—à–ø–∞–∂–∫"],
    "–ø–µ—á–∏": ["–ø–µ—á—å", "–º–∞–Ω–≥–∞–ª"],
    "–≥—Ä–∏–ª—å": ["–≥—Ä–∏–ª—å", "–±–∞—Ä–±–µ–∫—é"],
    "–Ω–∞–±–æ—Ä—ã": ["–Ω–∞–±–æ—Ä", "–∫–æ–º–ø–ª–µ–∫—Ç"],
    "–º–∏—Å–∫–∏": ["–º–∏—Å–∫–∞"],
    "—Ç—É—Ä–∫–∏": ["—Ç—É—Ä–∫–∞"],
    "—á–∞–π–Ω–∏–∫–∏": ["—á–∞–π–Ω–∏–∫"],
    "–æ–≤–æ—â–µ—Ä–µ–∑–∫–∏": ["–æ–≤–æ—â–µ—Ä–µ–∑–∫"],
    "–æ–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª–∏": ["–æ–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å"],
    "–¥–ª—è —É–±–æ—Ä–∫–∏": ["—à–≤–∞–±—Ä"]
}


# === –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
def filter_products_by_category(category_key):
    keywords = categories.get(category_key, [])
    result = []
    for product in products:
        name = product["name"].lower()
        if any(kw in name for kw in keywords):
            result.append(product)
    return result


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üõç –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
        [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "catalog":
        keyboard = [[InlineKeyboardButton(cat.capitalize(), callback_data=f"cat_{cat}")] for cat in categories.keys()]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        if query.message.text != "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:" or query.message.reply_markup != reply_markup:
            await query.edit_message_text("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)

    elif data.startswith("cat_"):
        category_key = data[4:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "cat_"
        filtered = filter_products_by_category(category_key)

        if not filtered:
            await query.edit_message_text(f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_key}' —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç.")
            return

        buttons = [[InlineKeyboardButton(p['name'], callback_data=f"prod_{p['code']}")] for p in filtered]
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="catalog")])
        reply_markup = InlineKeyboardMarkup(buttons)

        if query.message.text != "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:" or query.message.reply_markup != reply_markup:
            await query.edit_message_text("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=reply_markup)

    elif data.startswith("prod_"):
        code = data[5:]
        product = next((p for p in products if p['code'] == code), None)

        if not product:
            await query.edit_message_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        context.user_data['waiting_for_quantity'] = code
        msg = (
            f"üìå –¢–æ–≤–∞—Ä: {product['name']}\n"
            f"üì¶ –û—Å—Ç–∞—Ç–æ–∫: {product['stock']} —à—Ç.\n"
            f"üí∞ –¶–µ–Ω–∞: {product['price']} ‚ÇΩ\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:\n\n"
            f"üìû –•–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ? –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n"
            f"<b>+7 (928) 100-33-82</b>"
        )
        buttons = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="catalog")]]
        reply_markup = InlineKeyboardMarkup(buttons)

        if query.message.text != msg or query.message.reply_markup != reply_markup:
            await query.edit_message_text(msg, reply_markup=reply_markup, parse_mode='HTML')

    elif data == "cart":
        cart = context.user_data.get('cart', {})
        if not cart:
            await query.edit_message_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
            return

        message = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        total = 0
        for code, item in cart.items():
            p = next((x for x in products if x['code'] == code), None)
            if p:
                cost = p['price'] * item['quantity']
                message += f"{p['name']} √ó{item['quantity']} ‚Üí {cost:.2f} ‚ÇΩ\n"
                total += cost
        message += f"\nüí∞ –ò—Ç–æ–≥–æ: {total:.2f} ‚ÇΩ"

        buttons = [
            [InlineKeyboardButton("üì± WhatsApp", url="https://wa.me/79281003382")], 
            [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)

        if query.message.text != message or query.message.reply_markup != reply_markup:
            await query.edit_message_text(message, reply_markup=reply_markup)

    elif data == "back_to_main":
        await start(query, context)


# === –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ===
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in admin_ids:
        if update.message:
            await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        else:
            await update.callback_query.edit_message_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    page = int(context.args[0]) if context.args else 0
    per_page = 10
    start_idx = page * per_page
    end_idx = start_idx + per_page

    buttons = []
    for idx in range(start_idx, min(end_idx, len(products))):
        p = products[idx]
        buttons.append([
            InlineKeyboardButton(
                f"{p['name']} | {p['stock']} —à—Ç. | {p['price']}‚ÇΩ",
                callback_data=f"admin_edit_{p['code']}"
            )
        ])

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_page_{page - 1}"))
    if end_idx < len(products):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"admin_page_{page + 1}"))

    if nav_buttons:
        buttons.append(nav_buttons)

    buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add_product")])
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])

    reply_markup = InlineKeyboardMarkup(buttons)
    if update.message:
        await update.message.reply_text("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", reply_markup=reply_markup)
    elif update.callback_query:
        if query.message.text != "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤" or query.message.reply_markup != reply_markup:
            await query.edit_message_text("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", reply_markup=reply_markup)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ===
async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if user_id not in admin_ids:
        await query.edit_message_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    data = query.data

    if data.startswith("admin_page_"):
        page = int(data.split("_")[-1])
        context.args = [page]
        await admin_panel(update, context)

    elif data.startswith("admin_edit_"):
        code = data.split("_")[-1]
        product = next((p for p in products if str(p['code']) == code), None)
        if not product:
            await query.edit_message_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        context.user_data['edit_product_code'] = code
        await query.edit_message_text(
            f"üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n"
            f"<b>{product['name']}</b>\n"
            f"–û—Å—Ç–∞—Ç–æ–∫: <b>{product['stock']}</b> —à—Ç.\n"
            f"–¶–µ–Ω–∞: <b>{product['price']}‚ÇΩ</b>\n\n"
            f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="admin_change_price"),
                 InlineKeyboardButton("üì¶ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫", callback_data="admin_change_stock")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_page_0")]
            ]),
            parse_mode="HTML"
        )

    elif data == "admin_change_price":
        code = context.user_data.get('edit_product_code')
        product = next((p for p in products if p['code'] == code), None)
        if not product:
            await query.edit_message_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        context.user_data['admin_wait_price'] = code
        await query.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è <b>{product['name']}</b> (—Ç–µ–∫—É—â–µ–µ: {product['price']}‚ÇΩ):",
            parse_mode="HTML"
        )

    elif data == "admin_change_stock":
        code = context.user_data.get('edit_product_code')
        product = next((p for p in products if p['code'] == code), None)
        if not product:
            await query.edit_message_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        context.user_data['admin_wait_stock'] = code
        await query.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è <b>{product['name']}</b> (—Ç–µ–∫—É—â–µ–µ: {product['stock']} —à—Ç.):",
            parse_mode="HTML"
        )

    elif data == "admin_add_product":
        context.user_data['add_step'] = 0
        context.user_data['add_product'] = {}
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ <b>–∫–æ–¥</b> –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:", parse_mode="HTML")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'waiting_for_quantity' in context.user_data:
        code = context.user_data['waiting_for_quantity']
        product = next((p for p in products if p['code'] == code), None)

        if not product:
            del context.user_data['waiting_for_quantity']
            await update.message.reply_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        try:
            quantity = int(update.message.text)
            if quantity <= 0:
                raise ValueError
            if quantity > product['stock']:
                buttons = [[InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", url="tel:+79281003382")]]
                reply_markup = InlineKeyboardMarkup(buttons)
                await update.message.reply_text(
                    f"‚ùå –ù–∞ —Å–∫–ª–∞–¥–µ —Ç–æ–ª—å–∫–æ {product['stock']} —à—Ç.\n"
                    "–•–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ? –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:",
                    reply_markup=reply_markup
                )
                return
        except:
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
        cart = context.user_data.get('cart', {})
        if code in cart:
            cart[code]['quantity'] += quantity
        else:
            cart[code] = {'quantity': quantity}
        context.user_data['cart'] = cart
        del context.user_data['waiting_for_quantity']

        await update.message.reply_text(f"‚úÖ {product['name']} √ó{quantity} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É.")

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        buttons = [[InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="catalog")]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await update.message.reply_text("üì¶ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–æ—Ä?", reply_markup=reply_markup)

    # === –ê–¥–º–∏–Ω: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–ª–∏ –æ—Å—Ç–∞—Ç–∫–∞ ===
    elif 'admin_wait_price' in context.user_data:
        code = context.user_data.pop('admin_wait_price')
        product = next((p for p in products if p['code'] == code), None)
        try:
            new_price = round(float(update.message.text.replace(',', '.')), 2)
            product['price'] = new_price
            await update.message.reply_text(f"‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_price:.2f} ‚ÇΩ")
            save_products(products)
        except:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    elif 'admin_wait_stock' in context.user_data:
        code = context.user_data.pop('admin_wait_stock')
        product = next((p for p in products if p['code'] == code), None)
        try:
            new_stock = int(update.message.text)
            if new_stock < 0:
                raise ValueError
            product['stock'] = new_stock
            await update.message.reply_text(f"‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω: {new_stock} —à—Ç.")
            save_products(products)
        except:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    # === –ê–¥–º–∏–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ===
    elif 'add_step' in context.user_data:
        step = context.user_data['add_step']
        new_prod = context.user_data['add_product']

        if step == 0:
            code = update.message.text.strip()
            if any(str(p['code']) == code for p in products):
                await update.message.reply_text("‚ö†Ô∏è –¢–∞–∫–æ–π –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
                return
            new_prod['code'] = code
            context.user_data['add_step'] = 1
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> —Ç–æ–≤–∞—Ä–∞:", parse_mode="HTML")

        elif step == 1:
            new_prod['name'] = update.message.text.strip()
            context.user_data['add_step'] = 2
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ <b>–æ—Å—Ç–∞—Ç–æ–∫</b> (—à—Ç.):", parse_mode="HTML")

        elif step == 2:
            try:
                stock = int(update.message.text)
                if stock < 0:
                    raise ValueError
                new_prod['stock'] = stock
                context.user_data['add_step'] = 3
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–Ω—É</b> (‚ÇΩ):", parse_mode="HTML")
            except:
                await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (0 –∏ –≤—ã—à–µ)")

        elif step == 3:
            try:
                price = round(float(update.message.text.replace(',', '.')), 2)
                new_prod['price'] = price
                products.append(new_prod.copy())
                save_products(products)
                await update.message.reply_text(
                    f"‚úÖ –¢–æ–≤–∞—Ä <b>{new_prod['name']}</b> –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                    f"–ö–æ–¥: <code>{new_prod['code']}</code>\n"
                    f"–û—Å—Ç–∞—Ç–æ–∫: <b>{new_prod['stock']}</b>\n"
                    f"–¶–µ–Ω–∞: <b>{new_prod['price']}‚ÇΩ</b>",
                    parse_mode="HTML"
                )
                context.user_data.clear()
            except:
                await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150.50)")
                return


# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===
def save_products(products_list):
    import pandas as pd
    df = pd.DataFrame(products_list)
    df.to_excel(EXCEL_FILE, index=False)
    print("üíæ –¢–æ–≤–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    global products
    products = load_products()
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(admin_callback, pattern=r"^admin_"))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()


if __name__ == '__main__':
    import asyncio
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())
